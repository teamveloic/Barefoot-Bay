import { useState, useEffect } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { useForm } from "react-hook-form"; 
import { zodResolver } from "@hookform/resolvers/zod"; 
import { Plus, DollarSign, Filter, Home, Bath, SquareIcon, Calendar } from "lucide-react";
import { Link, useLocation } from "wouter";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Drawer,
  DrawerContent,
  DrawerHeader,
  DrawerTitle,
  DrawerTrigger,
  DrawerFooter,
  DrawerClose,
} from "@/components/ui/drawer";
import { Button } from "@/components/ui/button";
import { Slider } from "@/components/ui/slider";
import { CreateListingForm } from "@/components/real-estate/create-listing-form";
import { ListingCard } from "@/components/real-estate/listing-card";
import { PaymentDialog } from "@/components/real-estate/payment-dialog";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { insertRealEstateListing } from "@shared/schema";
import { queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";

// Listing types with color coding
const LISTING_TYPES = [
  { value: "FSBO", label: "For Sale By Owner", color: "bg-blue-500" },
  { value: "Agent", label: "Real Estate Agent", color: "bg-green-500" },
  { value: "Rent", label: "For Rent", color: "bg-purple-500" },
  { value: "OpenHouse", label: "Open House", color: "bg-orange-500" },
  { value: "Wanted", label: "Wanted", color: "bg-red-500" },
  { value: "Classified", label: "Classified", color: "bg-gray-500" },
];

// Formatting options for currency 
const formatter = new Intl.NumberFormat('en-US', {
  style: 'currency',
  currency: 'USD',
  minimumFractionDigits: 0,
});

const shortFormatter = new Intl.NumberFormat('en-US', {
  style: 'currency',
  currency: 'USD',
  notation: 'compact',
  minimumFractionDigits: 0,
});

export default function RealEstatePage() {
  const [, setLocation] = useLocation();
  const { toast } = useToast();
  const [showPaymentDialog, setShowPaymentDialog] = useState(false);
  const [selectedType, setSelectedType] = useState("all");
  
  // Filter states
  const [priceRange, setPriceRange] = useState([0, 2000000]);
  const [bedroomsRange, setBedroomsRange] = useState(0);
  const [bathroomsRange, setBathroomsRange] = useState(0);
  const [sqftRange, setSqftRange] = useState([0, 5000]);
  const [yearBuiltRange, setYearBuiltRange] = useState([1960, new Date().getFullYear()]);
  
  // Active filter flags
  const isPriceFilterActive = priceRange[0] > 0 || priceRange[1] < 2000000;
  const isBedroomsFilterActive = bedroomsRange > 0;
  const isBathroomsFilterActive = bathroomsRange > 0;
  const isSqftFilterActive = sqftRange[0] > 0 || sqftRange[1] < 5000;
  const isYearBuiltFilterActive = yearBuiltRange[0] > 1960 || yearBuiltRange[1] < new Date().getFullYear();
  
  // Count active filters for badge
  const activeFiltersCount = [
    isPriceFilterActive,
    isBedroomsFilterActive,
    isBathroomsFilterActive,
    isSqftFilterActive,
    isYearBuiltFilterActive
  ].filter(Boolean).length;

  // Drawer state
  const [isFiltersOpen, setIsFiltersOpen] = useState(false);
  
  // Reset filters function
  const resetAllFilters = () => {
    setPriceRange([0, 2000000]);
    setBedroomsRange(0);
    setBathroomsRange(0);
    setSqftRange([0, 5000]);
    setYearBuiltRange([1960, new Date().getFullYear()]);
  };
  
  // Fetch real estate listings
  const { data: listings = [], isLoading } = useQuery({
    queryKey: ['/api/real-estate-listings'],
  });
  
  // Create listing mutation
  const createListing = useMutation({
    mutationFn: async (newListing) => {
      const response = await fetch('/api/real-estate-listings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newListing),
      });
      
      if (!response.ok) {
        throw new Error('Failed to create listing');
      }
      
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/real-estate-listings'] });
      toast({
        title: "Listing Created",
        description: "Your real estate listing has been successfully created.",
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to create listing: " + error.message,
        variant: "destructive",
      });
    },
  });
  
  // Filter listings based on selected criteria
  const filteredListings = listings.filter(listing => {
    // Filter by type
    if (selectedType !== 'all' && listing.listingType !== selectedType) {
      return false;
    }
    
    // Filter by price
    if (listing.price < priceRange[0] || listing.price > priceRange[1]) {
      return false;
    }
    
    // Filter by bedrooms
    if (isBedroomsFilterActive && listing.bedrooms < bedroomsRange) {
      return false;
    }
    
    // Filter by bathrooms
    if (isBathroomsFilterActive && listing.bathrooms < bathroomsRange) {
      return false;
    }
    
    // Filter by square feet
    if (listing.squareFeet < sqftRange[0] || listing.squareFeet > sqftRange[1]) {
      return false;
    }
    
    // Filter by year built
    if (listing.yearBuilt < yearBuiltRange[0] || listing.yearBuilt > yearBuiltRange[1]) {
      return false;
    }
    
    return true;
  });
  
  return (
    <div className="container px-4 md:px-6 py-8 max-w-7xl mx-auto">
      <h1 className="text-4xl font-bold mb-2">REAL ESTATE LISTINGS</h1>
      <p className="text-muted-foreground mb-8">
        Browse available properties and listings in Barefoot Bay
      </p>
      
      <div className="mb-8">
        <div className="flex flex-col sm:flex-row gap-4">
          <Select value={selectedType} onValueChange={setSelectedType}>
            <SelectTrigger className="w-[200px]">
              <SelectValue placeholder="Filter by type" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Listings</SelectItem>
              {LISTING_TYPES.map(type => (
                <SelectItem key={type.value} value={type.value}>
                  {type.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          
          {/* Filters Drawer - All filters in one place */}
          <Drawer open={isFiltersOpen} onOpenChange={setIsFiltersOpen}>
            <DrawerTrigger asChild>
              <Button 
                variant={activeFiltersCount > 0 ? "secondary" : "outline"} 
                className="w-[180px] justify-between"
              >
                <div className="flex items-center">
                  <Filter className="h-4 w-4 mr-2" />
                  <span>Filters</span>
                </div>
                {activeFiltersCount > 0 && (
                  <Badge variant="outline" className="ml-2 rounded-full px-2 py-0.5">
                    {activeFiltersCount}
                  </Badge>
                )}
              </Button>
            </DrawerTrigger>
            <DrawerContent>
              <DrawerHeader>
                <DrawerTitle>Property Filters</DrawerTitle>
              </DrawerHeader>
              <div className="px-4 py-2 space-y-6">
                {/* Price Filter */}
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <h4 className="font-medium flex items-center">
                      <DollarSign className="h-4 w-4 mr-2" />
                      Price Range
                    </h4>
                    <div className="text-sm text-muted-foreground">
                      {shortFormatter.format(priceRange[0])} - {shortFormatter.format(priceRange[1])}
                    </div>
                  </div>
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <label htmlFor="drawerMinPrice" className="text-sm font-medium">Min Price</label>
                      <Input
                        id="drawerMinPrice"
                        type="number"
                        min="0"
                        max={priceRange[1]}
                        value={priceRange[0]}
                        onChange={(e) => setPriceRange([parseInt(e.target.value), priceRange[1]])}
                        className="w-full"
                      />
                    </div>
                    <div className="space-y-2">
                      <label htmlFor="drawerMaxPrice" className="text-sm font-medium">Max Price</label>
                      <Input
                        id="drawerMaxPrice"
                        type="number"
                        min={priceRange[0]}
                        max="10000000"
                        value={priceRange[1]}
                        onChange={(e) => setPriceRange([priceRange[0], parseInt(e.target.value)])}
                        className="w-full"
                      />
                    </div>
                  </div>
                  <Slider
                    value={priceRange}
                    min={0}
                    max={2000000}
                    step={10000}
                    onValueChange={setPriceRange}
                  />
                </div>
                
                {/* Bedrooms Filter */}
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <h4 className="font-medium flex items-center">
                      <Home className="h-4 w-4 mr-2" />
                      Bedrooms
                    </h4>
                    <div className="text-sm text-muted-foreground">
                      {bedroomsRange > 0 ? `${bedroomsRange}+ bed` : 'Any'}
                    </div>
                  </div>
                  <div className="space-y-2">
                    <label htmlFor="drawerBedrooms" className="text-sm font-medium">Minimum Bedrooms</label>
                    <div className="flex items-center space-x-2">
                      <Input
                        id="drawerBedrooms"
                        type="number"
                        min="0"
                        max="10"
                        value={bedroomsRange}
                        onChange={(e) => setBedroomsRange(parseInt(e.target.value))}
                        className="w-full"
                      />
                      {isBedroomsFilterActive && (
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => setBedroomsRange(0)}
                          className="px-2 h-8"
                        >
                          Clear
                        </Button>
                      )}
                    </div>
                  </div>
                </div>
                
                {/* Bathrooms Filter */}
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <h4 className="font-medium flex items-center">
                      <Bath className="h-4 w-4 mr-2" />
                      Bathrooms
                    </h4>
                    <div className="text-sm text-muted-foreground">
                      {bathroomsRange > 0 ? `${bathroomsRange}+ bath` : 'Any'}
                    </div>
                  </div>
                  <div className="space-y-2">
                    <label htmlFor="drawerBathrooms" className="text-sm font-medium">Minimum Bathrooms</label>
                    <div className="flex items-center space-x-2">
                      <Input
                        id="drawerBathrooms"
                        type="number"
                        min="0"
                        max="10"
                        step="0.5"
                        value={bathroomsRange}
                        onChange={(e) => setBathroomsRange(parseFloat(e.target.value))}
                        className="w-full"
                      />
                      {isBathroomsFilterActive && (
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => setBathroomsRange(0)}
                          className="px-2 h-8"
                        >
                          Clear
                        </Button>
                      )}
                    </div>
                  </div>
                </div>
                
                {/* Square Feet Filter */}
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <h4 className="font-medium flex items-center">
                      <SquareIcon className="h-4 w-4 mr-2" />
                      Square Feet
                    </h4>
                    <div className="text-sm text-muted-foreground">
                      {sqftRange[0]}-{sqftRange[1]} sq ft
                    </div>
                  </div>
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <label htmlFor="drawerMinSqft" className="text-sm font-medium">Min Sq Ft</label>
                      <Input
                        id="drawerMinSqft"
                        type="number"
                        min="0"
                        max={sqftRange[1]}
                        value={sqftRange[0]}
                        onChange={(e) => setSqftRange([parseInt(e.target.value), sqftRange[1]])}
                        className="w-full"
                      />
                    </div>
                    <div className="space-y-2">
                      <label htmlFor="drawerMaxSqft" className="text-sm font-medium">Max Sq Ft</label>
                      <Input
                        id="drawerMaxSqft"
                        type="number"
                        min={sqftRange[0]}
                        max="10000"
                        value={sqftRange[1]}
                        onChange={(e) => setSqftRange([sqftRange[0], parseInt(e.target.value)])}
                        className="w-full"
                      />
                    </div>
                  </div>
                  <Slider
                    value={sqftRange}
                    min={0}
                    max={5000}
                    step={100}
                    onValueChange={setSqftRange}
                  />
                </div>
                
                {/* Year Built Filter */}
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <h4 className="font-medium flex items-center">
                      <Calendar className="h-4 w-4 mr-2" />
                      Year Built
                    </h4>
                    <div className="text-sm text-muted-foreground">
                      {yearBuiltRange[0]}-{yearBuiltRange[1]}
                    </div>
                  </div>
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <label htmlFor="drawerMinYear" className="text-sm font-medium">From Year</label>
                      <Input
                        id="drawerMinYear"
                        type="number"
                        min="1900"
                        max={yearBuiltRange[1]}
                        value={yearBuiltRange[0]}
                        onChange={(e) => setYearBuiltRange([parseInt(e.target.value), yearBuiltRange[1]])}
                        className="w-full"
                      />
                    </div>
                    <div className="space-y-2">
                      <label htmlFor="drawerMaxYear" className="text-sm font-medium">To Year</label>
                      <Input
                        id="drawerMaxYear"
                        type="number"
                        min={yearBuiltRange[0]}
                        max={new Date().getFullYear()}
                        value={yearBuiltRange[1]}
                        onChange={(e) => setYearBuiltRange([yearBuiltRange[0], parseInt(e.target.value)])}
                        className="w-full"
                      />
                    </div>
                  </div>
                  <Slider
                    value={yearBuiltRange}
                    min={1960}
                    max={new Date().getFullYear()}
                    step={1}
                    onValueChange={setYearBuiltRange}
                  />
                </div>
              </div>
              <DrawerFooter>
                <Button onClick={resetAllFilters} variant="outline">Reset All Filters</Button>
                <DrawerClose asChild>
                  <Button>Apply Filters</Button>
                </DrawerClose>
              </DrawerFooter>
            </DrawerContent>
          </Drawer>
          
          <div className="flex-1"></div>
          
          <Dialog>
            <DialogTrigger asChild>
              <Button className="ml-auto">
                <Plus className="h-4 w-4 mr-2" /> Add Listing
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[700px] max-h-[90vh] overflow-y-auto">
              <DialogHeader>
                <DialogTitle>Create New Listing</DialogTitle>
              </DialogHeader>
              <div className="py-4">
                <CreateListingForm onSubmit={(data) => createListing.mutate(data)} />
              </div>
            </DialogContent>
          </Dialog>
          
          <Button 
            variant="outline" 
            className="hidden sm:flex"
            onClick={() => setShowPaymentDialog(true)}
          >
            Promote Listing
          </Button>
        </div>
      </div>
      
      {isLoading ? (
        <div className="py-12 text-center">
          <div className="animate-spin h-8 w-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4"></div>
          <p>Loading real estate listings...</p>
        </div>
      ) : (
        <>
          {filteredListings.length === 0 ? (
            <div className="py-12 text-center border rounded-lg bg-muted/20">
              <h3 className="text-lg font-medium mb-2">No listings found</h3>
              <p className="text-muted-foreground mb-4">
                Try adjusting your filters or create a new listing
              </p>
              <Dialog>
                <DialogTrigger asChild>
                  <Button>
                    <Plus className="h-4 w-4 mr-2" /> Create New Listing
                  </Button>
                </DialogTrigger>
                <DialogContent className="sm:max-w-[700px] max-h-[90vh] overflow-y-auto">
                  <DialogHeader>
                    <DialogTitle>Create New Listing</DialogTitle>
                  </DialogHeader>
                  <div className="py-4">
                    <CreateListingForm onSubmit={(data) => createListing.mutate(data)} />
                  </div>
                </DialogContent>
              </Dialog>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredListings.map((listing) => (
                <ListingCard 
                  key={listing.id} 
                  listing={listing} 
                  listingTypes={LISTING_TYPES}
                  onClick={() => setLocation(`/real-estate/${listing.id}`)}
                />
              ))}
            </div>
          )}
        </>
      )}
      
      {/* Promotional Payment Dialog */}
      {showPaymentDialog && (
        <PaymentDialog 
          open={showPaymentDialog} 
          onOpenChange={setShowPaymentDialog}
        />
      )}
    </div>
  );
}